version: '3.7'
services:
  flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask
    image: flask
    restart: unless-stopped
    environment:
      APP_ENV: 'prod'
      APP_DEBUG: 'False'
      APP_PORT: 5000
      MONGODB_DATABASE: flaskdb
      MONGODB_USERNAME: flaskuser
      MONGODB_PASSWORD: ayqgqc2h2o
      MONGODB_HOSTNAME: mongodb
    volumes:
      - appdata:/var/www
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_DATABASE: flaskdb
      MONGO_INITDB_ROOT_USERNAME: mongodbuser
      MONGO_INITDB_ROOT_PASSWORD: ayqgqc2h2o
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./mongodbdata:/data/db
    networks:
      - backend

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: webserver
    container_name: webserver
    restart: unless-stopped
    environment:
      APP_ENV: 'prod'
      APP_NAME: 'webserver'
      APP_DEBUG: 'true'
      SERVICE_NAME: 'webserver'
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local
